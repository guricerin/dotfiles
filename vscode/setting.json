{
    //----------------------------------------------------------
    // vscodeのデフォルトの設定
    //----------------------------------------------------------

    //----------------------------------------------------------
    // vscodeのeditorの設定
    //----------------------------------------------------------
    "workbench.colorTheme": "Zenburn",
    "editor.fontFamily": "Ricty",
    // フォントサイズ
    "editor.fontSize": 16,
    // コードの一行が長くなるための可読性向上
    "editor.wordWrap": "on",
    // ミニマップはいらない
    "editor.minimap.enabled": false,
    // tab キーを押すとスペースが挿入されます。
    "editor.insertSpaces": true,
    // tabをデフォルトで2スペースにする
    "editor.tabSize": 2,
    // エディターで空白文字を表示する方法を制御します。'none'、'boundary' および 'all' が使用可能です。'boundary' オプションでは、単語間の単一スペースは表示されません。
    "editor.renderWhitespace": "boundary",
    //エディターで開くパンくずの設定
    "breadcrumbs.enabled": true,

    //----------------------------------------------------------
    // vscodeの検索系
    //----------------------------------------------------------
    // 検索除外対象のディレクトリ
    "search.exclude": {
        "**/bower_components": true,
        "**/vendor": true,
        "**/env": true
    },

    //----------------------------------------------------------
    // vscodeのfileの設定
    //----------------------------------------------------------
    "files.associations": {
        "*.sql": "sql",
        "*.vue": "vue"
    },
    // 有効な場合、ファイルを開くときに文字セット エンコードを推測します。言語ごとに構成することも可能
    "files.autoGuessEncoding": true,
    // 有効にすると、ファイルの保存時に最終行以降の新しい行をトリミングします。
    "files.trimFinalNewlines": false,
    // 有効にすると、ファイルの保存時に末尾の空白をトリミングします。
    "files.trimTrailingWhitespace": true,
    // ペースト時に自動でフォーマット
    "editor.formatOnPaste": true,
    // ファイル保存時に自動でフォーマット
    "editor.formatOnSave": true,
    // 入力した行を自動でフォーマット
    "editor.formatOnType": true,

    //----------------------------------------------------------
    // vscodeのバージョン管理系
    //----------------------------------------------------------
    // ソース管理プロバイダーのセクションを常に表示するかどうか。
    "scm.alwaysShowProviders": true,

    //----------------------------------------------------------
    // vscodeの作業環境の設定(おもにタブの設定をvimと近づけるために設定)
    //----------------------------------------------------------
    // エディターのラベルの書式を制御します。例としてこの設定を変更することでファイルの場所を理解しやすくなります:
    // - short: 'parent'
    // - medium: 'workspace/src/parent'
    // - long: '/home/user/workspace/src/parent'
    // - default: '.../parent', 　別タブで、同じタイトルを共有する場合や、相対的なワークスペース パス タブが無効になっている場合
    "workbench.editor.labelFormat": "short",
    // 任意の表示グループが開かれた場合に、そこにエディターを表示するかどうかを制御します。無効にした場合、エディターは現在のアクティブなエディター グループに優先して開かれます。有効にした場合は、現在のアクティブなエディター グループにもう一度開くのではなく、既に開いているエディターが表示されます。特定のグループ内や現在アクティブなグループの横に強制的にエディターを開いた場合などに、この設定が無視される場合もあることにご注意ください。
    "workbench.editor.revealIfOpen": true,
    // 開いているエディターをアイコンで表示するかどうかを制御します。これには、アイコンのテーマを有効にする必要もあります。
    "workbench.editor.showIcons": false,
    // 編集中のタブをハイライト
    "workbench.editor.highlightModifiedTabs": true,
    //----------------------------------------------------------
    //ワンセット
    "workbench.editor.showTabs": true, //タブで見えるようにしないと何が開いているのかわからない
    "workbench.editor.enablePreview": true,
    "workbench.editor.enablePreviewFromQuickOpen": true,
    // { "key": "cmd+w", "command": "workbench.action.closeeditorsingroup" }
    // { "key": "ctrl+tab", "command": "workbench.action.openpreviouseditorfromhistory" },
    // { "key": "ctrl+tab", "command": "workbench.action.quickopennavigatenext", "when": "inquickopen" },
    //----------------------------------------------------------

    // エディターのタブの大きさを制御します。常に完全なエディター ラベルを表示するのに足りるタブの大きさを維持するには 'fit' を設定します。すべてのタブを一度に表示するには利用可能なスペースが足りない場合に、タブを縮小可能にするには 'shrink' を設定します。
    "workbench.editor.tabSizing": "shrink",
    // エディター タブの閉じるボタンの位置を制御するか、[off] に設定した場合に無効にします。
    "workbench.editor.tabCloseButton": "off",
    // todo エディターグループにアクティブなエディターが一つしか存在できない
    // 前のセッションからエディターが復元されていない場合に、起動時に表示するかどうかを制御します。'none' を選択するとエディターなしで開始します。'welcomepage' を選択するとウェルカム ページを開きます (既定)。'newuntitledfile' を選択すると新しい無題のファイルを開きます (空のワークスペースを開いているときのみ)。
    "workbench.startupEditor": "none",
    // エディターを開く場所を制御します。'left' または 'right' を選択すると現在アクティブになっているエディターの左または右にエディターを開きます。'first' または 'last' を選択すると現在アクティブになっているエディターとは別個にエディターを開きます。
    "workbench.editor.openPositioning": "first",
    // アクティビティバーでよけいなスペースを取られるのでfalse
    "workbench.activityBar.visible": false,
    // [開いているエディター] ウィンドウに表示するエディターの数。
    "explorer.openEditors.visible": 0,

    //----------------------------------------------------------
    // vscodeのdebugの設定
    //----------------------------------------------------------
    // デバッグ中にエディターの行内に変数値を表示します
    "debug.inlineValues": true,

    //----------------------------------------------------------
    // vscodeのwindowの設定
    //----------------------------------------------------------
    "window.zoomLevel": 0,

    //----------------------------------------------------------
    // vscodeのterminalの設定
    //----------------------------------------------------------
    // 設定した場合、ターミナルで選択しているテキストはクリップボードにコピーされます。
    "terminal.integrated.copyOnSelection": true,
    // ターミナルのフォントサイズ
    "terminal.integrated.fontSize": 14,
    //terminalでも使用可能になるaction
    "terminal.integrated.commandsToSkipShell": [
        "editor.action.toggleTabFocusMode",
        "workbench.action.debug.continue",
        "workbench.action.debug.pause",
        "workbench.action.debug.restart",
        "workbench.action.debug.run",
        "workbench.action.debug.start",
        "workbench.action.debug.stepInto",
        "workbench.action.debug.stepOut",
        "workbench.action.debug.stepOver",
        "workbench.action.debug.stop",
        "workbench.action.firstEditorInGroup",
        "workbench.action.focusActiveEditorGroup",
        "workbench.action.focusEighthEditorGroup",
        "workbench.action.focusFifthEditorGroup",
        "workbench.action.focusFirstEditorGroup",
        "workbench.action.focusFourthEditorGroup",
        "workbench.action.focusLastEditorGroup",
        "workbench.action.focusSecondEditorGroup",
        "workbench.action.focusSeventhEditorGroup",
        "workbench.action.focusSixthEditorGroup",
        "workbench.action.focusThirdEditorGroup",
        "workbench.action.lastEditorInGroup",
        "workbench.action.navigateDown",
        "workbench.action.navigateLeft",
        "workbench.action.navigateRight",
        "workbench.action.navigateUp",
        "workbench.action.openNextRecentlyUsedEditorInGroup",
        "workbench.action.openPreviousRecentlyUsedEditorInGroup",
        "workbench.action.quickOpen",
        "workbench.action.quickOpenPreviousEditor",
        "workbench.action.quickOpenView",
        "workbench.action.showCommands",
        "workbench.action.tasks.build",
        "workbench.action.tasks.restartTask",
        "workbench.action.tasks.runTask",
        "workbench.action.tasks.showLog",
        "workbench.action.tasks.showTasks",
        "workbench.action.tasks.terminate",
        "workbench.action.tasks.test",
        "workbench.action.terminal.clear",
        "workbench.action.terminal.clearSelection",
        "workbench.action.terminal.copySelection",
        "workbench.action.terminal.deleteWordLeft",
        "workbench.action.terminal.deleteWordRight",
        "workbench.action.terminal.focus",
        "workbench.action.terminal.focusAtIndex1",
        "workbench.action.terminal.focusAtIndex2",
        "workbench.action.terminal.focusAtIndex3",
        "workbench.action.terminal.focusAtIndex4",
        "workbench.action.terminal.focusAtIndex5",
        "workbench.action.terminal.focusAtIndex6",
        "workbench.action.terminal.focusAtIndex7",
        "workbench.action.terminal.focusAtIndex8",
        "workbench.action.terminal.focusAtIndex9",
        "workbench.action.terminal.focusFindWidget",
        "workbench.action.terminal.focusNext",
        "workbench.action.terminal.focusNextPane",
        "workbench.action.terminal.focusPrevious",
        "workbench.action.terminal.focusPreviousPane",
        "workbench.action.terminal.hideFindWidget",
        "workbench.action.terminal.kill",
        "workbench.action.terminal.moveToLineEnd",
        "workbench.action.terminal.moveToLineStart",
        "workbench.action.terminal.new",
        "workbench.action.terminal.newInActiveWorkspace",
        "workbench.action.terminal.paste",
        "workbench.action.terminal.resizePaneDown",
        "workbench.action.terminal.resizePaneLeft",
        "workbench.action.terminal.resizePaneRight",
        "workbench.action.terminal.resizePaneUp",
        "workbench.action.terminal.runActiveFile",
        "workbench.action.terminal.runSelectedText",
        "workbench.action.terminal.scrollDown",
        "workbench.action.terminal.scrollDownPage",
        "workbench.action.terminal.scrollToBottom",
        "workbench.action.terminal.scrollToNextCommand",
        "workbench.action.terminal.scrollToPreviousCommand",
        "workbench.action.terminal.scrollToTop",
        "workbench.action.terminal.scrollUp",
        "workbench.action.terminal.scrollUpPage",
        "workbench.action.terminal.selectAll",
        "workbench.action.terminal.selectToNextCommand",
        "workbench.action.terminal.selectToNextLine",
        "workbench.action.terminal.selectToPreviousCommand",
        "workbench.action.terminal.selectToPreviousLine",
        "workbench.action.terminal.split",
        "workbench.action.terminal.splitInActiveWorkspace",
        "workbench.action.terminal.toggleTerminal",
        "workbench.action.togglePanel"
    ],
    //----------------------------------------------------------
    // installした拡張の設定
    //----------------------------------------------------------


    //----------------------------------------------------------
    // vscode vimの設定
    //----------------------------------------------------------
    // systemのclipboardを使用します
    "vim.useSystemClipboard": true,
    // hlsearchは必要だと思う
    "vim.hlsearch": true,
    // 検索をするときに見やすいモッサりすることなければこのまま
    "vim.easymotion": true,
    // wordを* or + で検索するでしょ?
    "vim.visualstar": true,
    "vim.useCtrlKeys": true,
    // ignore case in search patterns.
    "vim.ignorecase": true,
    // show where a / search matches as you type it.
    "vim.incsearch": true,
    // enable the sneak plugin for vim.
    "vim.sneak": true,

    //----------------------------------------------------------
    // vscode gitの設定
    //----------------------------------------------------------
    // 自動フェッチが有効かどうか
    "git.autofetch": true,
    // set the default

    //----------------------------------------------------------
    // vscode ファイル保存時の挙動
    //----------------------------------------------------------
    "editor.formatOnSave": false,
    // enable per-language
    "[javascript]": {
        "editor.formatOnSave": true
    },
}
